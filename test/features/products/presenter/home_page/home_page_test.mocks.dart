// Mocks generated by Mockito 5.2.0 from annotations
// in shopping_products/test/features/products/presenter/home_page/home_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shopping_products/features/products/domain/entities/product_entity.dart'
    as _i6;
import 'package:shopping_products/features/products/domain/errors/errors.dart'
    as _i5;
import 'package:shopping_products/features/products/domain/usecases/delete_product_usecase.dart'
    as _i7;
import 'package:shopping_products/features/products/domain/usecases/get_all_products_usecase.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [IGetAllProductsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIGetAllProductsUsecase extends _i1.Mock
    implements _i3.IGetAllProductsUsecase {
  MockIGetAllProductsUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.ProductEntity>>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
          returnValue:
              Future<_i2.Either<_i5.Failure, List<_i6.ProductEntity>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.ProductEntity>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i6.ProductEntity>>>);
}

/// A class which mocks [IDeleteProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIDeleteProductUsecase extends _i1.Mock
    implements _i7.IDeleteProductUsecase {
  MockIDeleteProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> call(int? productId) =>
      (super.noSuchMethod(Invocation.method(#call, [productId]),
              returnValue: Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                  _FakeEither_0<_i5.Failure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}
